<style lang="less">
.tag {
  margin-right: 10px;
}
.container {
  position: absolute;
  top: 30%;
  bottom: 0;
  left: 0;
  right: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;
  height: 320px;
  z-index: 1;
}
.list {
  margin: 5px;
  overflow-y: scroll;
  height: 27px;
  z-index: 999;
}
.searchBar {
  margin: 10px auto;
}
</style>
<template>
  <view class="layout layout-list">
    <view class="col col-24">
      <tab @bindChange.user="changeTab" />
    </view>
    <view class="col col-24 searchBar">
      <searchbar @changeValue.user="handleChangeValue"
                 @selectedOption.user="getSelectedValue"
                 :dataSource.sync="suggestData" />
    </view>
    <view class="list list-last-child">
      <repeat for="{{tagsObjList}}"
              index="index"
              item="item">
        <tags :type="item.type"
              :index="index"
              @closeItem.user="handleCloseTag">{{item.text}}</tags>
      </repeat>
    </view>
    <view class="container">
      <echarts :ec.sync="ec" />
    </view>
  </view>
</template>

<script>
import wepy from 'wepy'
import SearchBar from '@/components/searchbar'
import Tab from 'kai-ui/Tab'
import Tag from 'kai-ui/Tag'
import Echarts from '@/components/echart'
import moment from 'moment'
import $ from '../libs/util.js'
export default class Index extends wepy.page {
  config = {
    navigationBarTitleText: 'npm 包下载趋势图'
  }
  components = {
    tab: Tab,
    tags: Tag,
    echarts: Echarts,
    searchbar: SearchBar
  }
  mixins = []
  data = {
    defaultInput: 'vue',
    suggestData: [],
    suggestValue: '', // 查询建议值
    packageName: '', // 查询包名
    period: 'last-month',
    tab: {
      list: [{ id: 1, title: '1个月' }, { id: 2, title: '3个月' }, { id: 3, title: '6个月' }, { id: 4, title: '1年' }],
      selectedId: 1,
      class: 'tab-success'
    },
    dataSource: [],
    tagsObjList: [],
    tagsList: [],
    ec: {
      option: {
        backgroundColor: '#ffffff',
        tooltip: {},
        xAxis: {
          type: 'category',
          boundaryGap: false,
          // axisLabel: {
          //   rotate: '20'
          // },
          data: []
        },
        yAxis: {
          type: 'value'
        },
        legend: {
          data: []
        },
        grid: {
          left: '8%',
          right: '8%',
          bottom: '3%',
          containLabel: true
        },
        series: [
        ]
      }
    }
  }
  computed = {
  }
  watch = {
    tab(curVal, oldVal) {
      if (this.tagsList.length > 0) {
        this.getTrendDataByTags()
      }
    },
    tagsList() {
      this.getTrendDataByTags()
    }
  }
  methods = {
    handleChangeValue(res) {
      this.suggestValue = res
      if (res) {
        this.getNpmSuggest()
      }
    },
    getSelectedValue(value) {
      this.packageName = value
      this.tagsList.push(value)
      let tagObj = {
        type: 'primary',
        text: value
      }
      this.tagsObjList.push(tagObj)
      this.getTrendDataByTags()
    },
    handleCloseTag(val) {
      this.tagsList = this.tagsList.filter((item, index) => {
        return index !== val
      })
      this.tagsObjList = this.tagsObjList.filter((item, index) => {
        return index !== val
      })
    },
    changeTab(res) {
      const dateFormat = 'YYYY-MM-DD'
      this.tab.selectedId = res
      switch (res) {
        case 1:
          this.period = 'last-month'
          break
        case 2:
          this.period = `${moment()
            .subtract(3, 'months')
            .format(dateFormat)}:${moment().format(dateFormat)}`
          break
        case 3:
          this.period = `${moment()
            .subtract(6, 'months')
            .format(dateFormat)}:${moment().format(dateFormat)}`
          break
        case 4:
          this.period = `${moment()
            .subtract(1, 'year')
            .format(dateFormat)}:${moment().format(dateFormat)}`
          break
      }
      this.$apply()
    }
  }
  onLoad() {
    const { tab } = this
    this.$invoke('tab', 'doInitTabData', tab)
  }
  async getTrendDataByTags() {
    wepy.showLoading({
      title: '加载中',
      icon: 'loading',
      mask: true
    })
    const promises = this.tagsList.map(async (item) => {
      const baseURL = `${$.apiPath}/https://api.npmjs.org/downloads/range`
      const url = `${baseURL}/${this.period}/${item}`
      const res = await wepy.request(url)
      return res.data
    })
    const resList = await Promise.all(promises)
    let xAxisList = []
    let legendList = []
    let seriesList = []
    resList.map((item, index) => {
      let downloadsList = []
      legendList.push(item.package)
      item.downloads.map((ite, idx) => {
        downloadsList.push(ite.downloads)
        if (index === 0) {
          xAxisList.push(ite.day)
        }
      })
      let seriesObj = {
        name: item.package,
        type: 'line',
        data: downloadsList
      }
      seriesList.push(seriesObj)
    })
    this.ec.option.xAxis.data = xAxisList
    this.ec.option.legend.data = legendList
    this.ec.option.series = seriesList
    wepy.hideLoading()
    this.$apply()
  }
  async getNpmSuggest() {
    wepy.showLoading({
      title: '加载中',
      icon: 'loading',
      mask: true
    })
    const url = `${$.apiPath}/https://api.npms.io/v2/search/suggestions?q=${this.suggestValue}`
    try {
      const res = await wepy.request(url)
      this.suggestData = res.data
      this.$apply()
      wepy.hideLoading()
    } catch (e) {
      wepy.hideLoading()
      console.log('e', e)
      wepy.showToast({
        title: '网络繁忙,请稍后再试!',
        icon: 'none',
        duration: 2000
      })
    }
  }
}
</script>
